#!/usr/bin/python

import sys, os, subprocess

def validateAddress(ip):
    a = ip.split('.')
    if len(a) != 4:
        return False
    for x in a:
        if not x.isdigit():
            return False
        i = int(x)
        if i < 0 or i > 255:
            return False
    return True

def createStructure(target):
    print "\nCreating structure for %s" % target
    directory = "%s/%s" % (os.getcwd(), target)
    if not os.path.exists(directory):
        os.makedirs(directory)
        os.makedirs(directory + "/scans")
        os.makedirs(directory + "/exploits")
        return None
    return directory

def executeNmapScan(ip, cat):
    result = ""
    command = "nmap --version"
    services = []
    if cat == 'fast':
        print "\n-> Executing Nmap fast version scan, aggressive, no ping, no dns check..."
        NAME = 'nmap-fast-scan.nmap'
        command = 'nmap -F -Pn -n -T4 --stats-every 10s -sV -oN %s/scans/%s %s' % (ip, NAME, ip)
    elif cat == 'heavy':
        print '\n-> Executing Nmap heavy version scan, all ports, aggressive, no ping, no dns check...'
        NAME = 'nmap-heavy-scan.nmap'
        command = 'nmap --top-ports=10000 -Pn -n -T4 --stats-every 10s -sV -oN %s/scans/%s %s' % (ip, NAME, ip)
    else:
        print '\n-> Executing Nmap UDP light scan...'
        NAME = 'nmap-udp-scan.nmap'
        command = 'nmap --top-ports=10 -sU -sV -Pn -n --stats-every 10s -oN %s/scans/%s %s' % (ip, NAME, ip)
    try:
        result = subprocess.check_output(command, shell=True)
    except KeyboardInterrupt:
        print "Skipping: %s" % command
    except Exception as e:
        print "Unable to proceed with scan: %s" % e
        sys.exit(2)
    if cat == 'heavy':
        services = filterResults(result)
    return services

def filterResults(result):
    servicesToCheck = ['ftp', 'smb', 'http', 'ssh', 'snmp', 'ms-sql']
    services = []
    #fileToCheck = "%s/scans/nmap-heavy-scan.nmap" % ip
    lines = result.split("\n")
    for line in lines:
        line = line.strip()
        for service in servicesToCheck:
            if service in line:
                services.append(service)
                break
    return services

def executeVulnScan(ip, services):
    if len(services) < 1:
        sys.exit(0)
    result = ''
    for service in services:
        print '\n-> Checking for vulnerabilities in %s' % service
        NAME = '%s-nse-scripts.scan' % service
        command = 'nmap --script=%s* -oN %s/scans/%s %s' % (service, ip, NAME, ip)
        try:
            result = subprocess.check_output(command, shell=True)
        except KeyboardInterrupt:
            print 'Skipping: %s' % NAME
        except Exception as e:
            print 'Unable to proceed with scan: %s' % e

def main(target):
    if len(target) <= 0:
        print "\nUsage...\n"
        sys.exit(0)

    # Validate address
    if not validateAddress(target[0]):
        print "\nInvalid IP\n"
        sys.exit(0)
    ip = target[0]
    # Step 1: Create directory structure
    createStructure(ip)
    # Step 2: Fast Nmap scan
    executeNmapScan(ip, 'fast')
    # Step 3: Heavy Nmap scan
    services = executeNmapScan(ip, 'heavy')
    # Step 4: Light UDP Scan
    executeNmapScan(ip, 'udp')
    # Step 5: Vulnerability Scan
    #services = filterResults(ip)
    executeVulnScan(ip, services)

if __name__ == "__main__":
    main(sys.argv[1:])
