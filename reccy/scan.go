package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
)

func Scan(ip string, light bool) {
	Prepare()
	if light {
		ExecuteLightScan(ip)
	} else {
		ExecuteHeavyScan(ip)
	}
}

func ExecuteNmapCommand(args[] string, done chan bool) {
	binary, err := exec.LookPath("nmap")
	if err != nil {
		panic(err)
    }
    env := os.Environ()
    execErr := syscall.Exec(binary, args, env)
    if execErr != nil {
        panic (execErr)
    }
	<-done
}

func ExecuteLightScan(ip string) {
	fmt.Printf("Executing light nmap scan on %s.\n", ip)
	commandTCP := []string{"-Pn", "-vv", "-T4", "-sV", "-oN", "scan/light-top-20-ports-scan.nmap", "--top-ports=20", ip}
	commandUDP := []string{"-Pn", "-vv", "-sU", "-oN", "scan/light-udp-scan.nmap", "-p53,161,445", ip}
	done := make(chan bool, 1)
	//doneUDP := make(chan bool, 1)
	go ExecuteNmapCommand(commandTCP, done)
	go ExecuteNmapCommand(commandUDP, done)
	<-done
}

func ExecuteHeavyScan(ip string) {
	fmt.Printf("\nExecuting heavy nmap scan on %s.\n", ip)
	commandTCP := []string{"-Pn", "-vv", "-T4", "-sV", "-sC", "-n", "--top-ports=10000", "-oN", "scan/heavy-ports-scan.nmap", ip}
	done := make(chan bool, 1)
	go ExecuteNmapCommand(commandTCP, done)
	<-done
}
