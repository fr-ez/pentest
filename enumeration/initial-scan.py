#!/usr/bin/python

import ArgumentParser
import os, sys, subprocess, re, urlparse
import threading


ALLSERVICES = []
THREADS = []

class newThreadNmap(threading.Thread):
    def __init__(self,threadID,target):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.target = target

    def run(self):
        ALLSERVICES[self.threadID - 1] = conductLightNmap(self.target)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# ------------------------------------
#       Toolbox
# ------------------------------------

def printHeader(target):
    print ""
    print "###################################################"
    print "##"
    print "##   Scanning %s" % target
    print "##"
    print "###################################################"
    print ""

def printUsage():
    print "Usage: %s <target ip>" % sys.argv[0]

def printPlus(message):
    print bcolors.OKGREEN + "[+] " + message + bcolors.ENDC

def printMinus(message):
    print bcolors.WARNING + "[-] " + message + bcolors.ENDC

def printStd(message):
    print "[*] " + message

def printErr(message):
    print bcolors.FAIL + "[!] " + message + bcolors.ENDC

def printDbg(message):
    print bcolors.OKBLUE + "[?] " + message + bcolors.ENDC

def printInBox(command, result):
    top =   "###################################################"
    bot =   "==================================================="
    sub =   "---------------------------------------------------"
    return "%s\n\n%s\n\n%s\n\n%s\n%s\n" % (top, command, sub, result, bot)

def parseNmapScan(results):
    services = {}
    lines = results.split("\n")
    for line in lines:
        ports = []
        line = line.strip()
        if ("tcp" in line or "udp" in line) and ("open" in line) and not ("filtered" in line) and not ("Discovered" in line):
            while "  " in line:
                line = line.replace("  ", " ");
            linesplit = line.split(" ")
            service = linesplit[2]
            port = linesplit[0]
            if service in services:
                ports = services[service]
            ports.append(port)
            services[service] = ports
    return services

def dispatchModules(target, services):
    for service in services:
        port = services[service]
        if service in KNOWN_SERVICES:
            try:
                KNOWN_SERVICES[service](target, port)
            except AttributeError:
                printDbg("No module available for %s - %s" % (service, port))
        else:
            printDbg("No module available for %s - %s" % (service, port))

def validate_ip(s):
    a = s.split('.')
    if len(a) != 4:
        return False
    for x in a:
        if not x.isdigit():
            return False
        i = int(x)
        if i < 0 or i > 255:
            return False
    return True

def parse_ip(s):
    urls = re.findall("http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", s)
    for url in urls:
        url = url.lower()
    return list(set(urls))

def parse_ip_directories(s):
    urls = re.findall("http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+/", s)
    for url in urls:
        url = url.lower()
    return list(set(urls))

# Setup
def prepareFolder(target):
    printStd("Preparing portfolio for %s" %(target))
    directory = "%s/%s" % (os.getcwd(), target)
    if not os.path.exists(directory):
        os.makedirs(directory)
        return None
    return directory

def writeToFile(target, name, content):
    path = "%s/%s/%s.txt" % (os.getcwd(), target, name)
    file = open(path, "a+")
    file.write(content)
    file.close()
    return path

# Parallel Nmap
def execNmapParallel(ipList):
    for count,ip in enumerate(ipList,1):
        t = newThreadNmap(count,ip)
        THREADS.append(t)
        t.start()
    for thread in THREADS:
        thread.join()


# Light Nmap
def conductLightNmap(target):
    printStd("Conducting light nmap scan for %s" %(target))
    NAME = "nmap_light"

    # Conduct Scan #
    TCPSCAN = "nmap %s -Pn -T4 --top-ports 20" % target
    UDPSCAN = "nmap -sU -Pn -p 161 %s" % target
    tcpResults = ""
    udpResults = ""
    try:
        tcpResults = subprocess.check_output(TCPSCAN, shell=True)
        udpResults = subprocess.check_output(UDPSCAN, shell=True)
        #print "%s" % tcpResults

        # Write Results #
        content = "%s" % printInBox(TCPSCAN, tcpResults)
        path = writeToFile(target, NAME, content)

        printPlus("Finished light nmap scan: %s" % path)
    except KeyboardInterrupt:
        printMinus("Skipping:\n\t%s" % TCPSCAN)
    except Exception as e:
        printErr("Unable to conduct light nmap scan:\n\t%s\n\n%s" % (TCPSCAN, e))
        sys.exit(2)

    # Filter Results #
    services = parseNmapScan("%s\n%s" % (tcpResults, udpResults))

    return services

# Heavy NMAP
# ========================
def conductHeavyNmap(target):
    printStd("Conducting heavy nmap scan for %s" %(target))
    NAME = "nmap_heavy"

    TCPSCAN = "nmap -T4 -Pn -A --top-ports 10000 %s" % target
    #TCPSCAN = "nmap -T4 -Pn -A -p- %s" % target
    try:
        tcpResults = subprocess.check_output(TCPSCAN, shell=True)

        # Write Results #
        content = "%s" % printInBox(TCPSCAN, tcpResults)
        path = writeToFile(target, NAME, content)
        printPlus("Finished heavy nmap scan: %s/%s/nmap_heavy.txt" % (os.getcwd(), target))
    except KeyboardInterrupt:
        printMinus("Skipping:\n\t%s" % TCPSCAN)
    except Exception:
        printErr("Unable to conduct heavy nmap scan:\n\t%s" % TCPSCAN)

    printStd("Conducting UDP scan")

    # Conduct UDP Scan #
    UDPSCAN = "nmap -sU --top-ports 1000 %s" % target
    try:
        udpResults = subprocess.check_output(UDPSCAN, shell=True)

        # Write Results #
        content = "%s" % printInBox(UDPSCAN, udpResults)
        path = writeToFile(target, NAME, content)
        printPlus("Finished UDP scan: %s/%s/nmap_heavy.txt" % (os.getcwd(), target))
    except KeyboardInterrupt:
        printMinus("Skipping:\n\t%s" % UDPSCAN)
    except Exception:
        printErr("Unable to conduct UDP scan:\n\t%s" % UDPSCAN)

def moduleDispatch(target):
    try:
        conductHeavyNmap(target)
    except KeyboardInterrupt:
        print "\n\nExiting.\n"
        sys.exit(1)

# Main
def main(targets):
    parser = ArgumentParser()

    #if len(targets) <= 0:
    #    printUsage()
    #    sys.exit(2)

    #for target in targets:
    #    if not validate_ip(target):
    #        printMinus("Invalid IP Address")
    #        printUsage()
    #        sys.exit(2)
    #    printHeader(target)
    #    error = prepareFolder(target)

    #execNmapParallel(targets)
    #for count,ip in enumerate(targets,1):
    #    moduleDispatch(ip)


if __name__ == "__main__":
    ALLSERVICES = [None] * len(sys.argv[1:])
    main(sys.argv[1:])

